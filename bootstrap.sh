#!/usr/bin/env bash
# Neovim Bootstrap Script
# - Ensures Neovim and Git are installed
# - Bootstraps config from GitHub
# - Installs lazy.nvim and Treesitter parsers
# - Windows: Initializes MSVC environment for LSP support

set -euo pipefail

# Set to 1 for debug output
DEBUG="${DEBUG:-0}"
[[ "$DEBUG" == "1" ]] && set -x

# Constants
CONFIG_REPO="${CONFIG_REPO:-https://github.com/arturo-mayorga/nvim-config}"
TREE_SITTER_LANGS="lua vimdoc cpp python typescript tsx javascript json"

# ------------------------------------------------------------------------------
info() { echo -e "→ $*"; }
warn() { echo -e "⚠️  $*" >&2; }
fail() { echo -e "❌ $*" >&2; exit 1; }

# ------------------------------------------------------------------------------
check_prerequisites() {
  command -v nvim >/dev/null 2>&1 || fail "Neovim ≥0.9 is required — install it first."
  command -v git  >/dev/null 2>&1 || fail "Git is required."
}

# ------------------------------------------------------------------------------
get_nvim_paths() {
  CONFIG_DIR=$(nvim -u NONE --headless -c 'lua print(vim.fn.stdpath("config"))' +qa 2>&1)
  DATA_DIR=$(nvim  -u NONE --headless -c 'lua print(vim.fn.stdpath("data"))'   +qa 2>&1)
  LAZY_PATH="$DATA_DIR/lazy/lazy.nvim"

  info "CONFIG_DIR: $CONFIG_DIR"
  info "DATA_DIR: $DATA_DIR"
}

# ------------------------------------------------------------------------------
clone_or_update_config() {
  if [[ -d "$CONFIG_DIR/.git" ]]; then
    info "Updating existing config..."
    git -C "$CONFIG_DIR" pull --ff-only
  else
    info "Cloning config from $CONFIG_REPO..."
    git clone "$CONFIG_REPO" "$CONFIG_DIR"
  fi
}

# ------------------------------------------------------------------------------
bootstrap_lazy() {
  if [[ ! -d "$LAZY_PATH" ]]; then
    info "Bootstrapping lazy.nvim..."
    git clone --filter=blob:none https://github.com/folke/lazy.nvim "$LAZY_PATH"
  fi
}

# ------------------------------------------------------------------------------
run_plugin_sync() {
  info "Installing/updating plugins and parsers..."
  nvim --headless "+Lazy! sync | TSUpdateSync $TREE_SITTER_LANGS" +qa
}

# ------------------------------------------------------------------------------
bootstrap_windows_env() {
  # Only run this on Windows
  [[ "${OS:-}" != "Windows_NT" ]] && return

  info "Bootstrapping MSVC environment for Windows..."

  VSWHERE="/c/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe"
  if [[ -x "$VSWHERE" ]]; then
    VSROOT=$("$VSWHERE" -latest \
                      -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \
                      -property installationPath | tr -d '\r')
    VSDEV="$VSROOT/Common7/Tools/VsDevCmd.bat"
  else
    VSDEV="/c/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools/Common7/Tools/VsDevCmd.bat"
  fi

  VSDEV_WIN=$(cygpath -w "$VSDEV")
  info "Using MSVC via: $VSDEV_WIN"

  TMPBAT="$(mktemp --suffix=.bat)"
  TMPBAT_WIN=$(cygpath -w "$TMPBAT")

  cat >"$TMPBAT" <<EOF
@echo off
rem  Generated by nvim-config bootstrap
call "$VSDEV_WIN" -arch=x64 -host_arch=x64
nvim --headless ^
  -c "Lazy! sync" ^
  -c "TSUpdateSync $TREE_SITTER_LANGS" ^
  -c "qa"
EOF

  info "Running MSVC-bootstrapped nvim via $TMPBAT_WIN"
  cmd.exe /C "\"$TMPBAT_WIN\""
  rm -f "$TMPBAT"
}

# ------------------------------------------------------------------------------
main() {
  bootstrap_windows_env
  check_prerequisites
  get_nvim_paths
  clone_or_update_config
  bootstrap_lazy
  run_plugin_sync

  info "✓ Neovim ready to go!"
}

main "$@"
